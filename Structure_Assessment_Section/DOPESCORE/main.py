import os
import glob
import json

# Example for: selection.assess_dope()
from modeller import *
from modeller.scripts import complete_pdb

def dopeScore(pdb_file_path):
    env = environ()
    env.libs.topology.read(file='$(LIB)/top_heav.lib')
    env.libs.parameters.read(file='$(LIB)/par.lib')

    # Read a model previously generated by Modeller's automodel class_
    mdl = complete_pdb(env, pdb_file_path)

    # Select all atoms in the first chain
    atmsel = selection(mdl.chains[0])

    score = atmsel.assess_dope()
    return int(score)

def readConfigJSON(cwd):
    path_to_json = f'{cwd}/config.json'
    with open(f'{path_to_json}', 'r') as file:
        data = file.read()
        configuration = json.loads(data)
    return configuration
def iterator(template_pdbs_folders, Target_List, alphafold_or_modeller_results_path, mode, output_folder):
    for template in template_pdbs_folders:
        for key, value in Target_List.items():
            if key in template:
                for target in alphafold_or_modeller_results_path:
                    if key in target:
                        if mode == "AlphaFold":
                            pdbs = glob.glob(f'{target}/ranked*.pdb')
                            pdbs.sort()
                            with open(f'{output_folder}/DOPESCORE.csv', 'a') as output_file:
                                for pdb in pdbs:
                                    dope_score = dopeScore(pdb)
                                    output_file.write(f"{os.path.basename(target)},AlphaFold,{os.path.basename(pdb)[:-4]},{dope_score}\n")
                        if mode == "two_best_supervised":
                            pdbs = glob.glob(f'{target}/two_best_supervised/*.pdb')
                            pdbs.sort()
                            with open(f'{output_folder}/DOPESCORE.csv', 'a') as output_file:
                                for pdb in pdbs:
                                    dope_score = dopeScore(pdb)
                                    output_file.write(f"{os.path.basename(target)},two_best_supervised,{os.path.basename(pdb)[:-4]},{dope_score}\n")
                        if mode == "two_best_unsupervised":
                            pdbs = glob.glob(f'{target}/two_best_unsupervised/*.pdb')
                            pdbs.sort()
                            with open(f'{output_folder}/DOPESCORE.csv', 'a') as output_file:
                                for pdb in pdbs:
                                    dope_score = dopeScore(pdb)
                                    output_file.write(f"{os.path.basename(target)},two_best_unsupervised,{os.path.basename(pdb)[:-4]},{dope_score}\n")
                        if mode == "five_ranked_unsupervised":
                            pdbs = glob.glob(f'{target}/five_ranked_unsupervised/*.pdb')
                            pdbs.sort()
                            with open(f'{output_folder}/DOPESCORE.csv', 'a') as output_file:
                                for pdb in pdbs:
                                    dope_score = dopeScore(pdb)
                                    output_file.write(f"{os.path.basename(target)},five_ranked_unsupervised,{os.path.basename(pdb)[:-4]},{dope_score}\n")

def main():
    cwd = os.getcwd()
    configuration = readConfigJSON(cwd)
    template_pdb_file_location = f'{cwd}/AlphaFold_Section/AlphaFold_Files/templates'
    template_pdbs_folders = glob.glob(f'{template_pdb_file_location}/*')
    template_pdbs_folders.sort()
    alphafold_results_path = f'{cwd}/AlphaFold_Section/AlphaFold_Files/results'
    alphafold_Targets = glob.glob(f'{alphafold_results_path}/*')
    alphafold_Targets.sort()
    run_two_best_supervised = configuration["StructureAssessment"]["2best_supervised"]
    run_two_best_unsupervised = configuration["StructureAssessment"]["2best_unsupervised"]
    run_five_ranked_unsupervised = configuration["StructureAssessment"]["5ranked_unsupervised"]
    modeller_results_path = f'{cwd}/Modeller_Section/results'
    modeller_Targets = glob.glob(f'{modeller_results_path}/*')
    modeller_Targets.sort()
    configuration = readConfigJSON(cwd)
    Target_List = configuration["AlphaFold_Prediction_List"]
    output_folder = f'{cwd}/Structure_Assessment_Section/DOPESCORE/'
    if os.path.exists(f'{output_folder}/DOPESCORE.csv'):
        os.remove(f'{output_folder}/DOPESCORE.csv')

    iterator(template_pdbs_folders, Target_List, alphafold_Targets,"AlphaFold", output_folder)
    if run_two_best_supervised.upper() == "TRUE":
        iterator(template_pdbs_folders, Target_List, modeller_Targets,"two_best_supervised", output_folder)
    if run_two_best_unsupervised.upper() == "TRUE":
        iterator(template_pdbs_folders, Target_List, modeller_Targets,"two_best_unsupervised", output_folder)
    if run_five_ranked_unsupervised.upper() == "TRUE":
        iterator(template_pdbs_folders, Target_List, modeller_Targets,"five_ranked_unsupervised", output_folder)

    with open(f'{output_folder}/DOPESCORE.csv', 'r') as file:
        data = file.readlines()
    with open(f'{output_folder}/DOPESCORE.csv', 'w') as output_file:
        output_file.write("Target,Model Type,Model,DOPESCORE\n")
        output_file.writelines(data[:])



if __name__ == "__main__":
    main()